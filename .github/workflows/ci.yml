name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
        exclude:
          - os: windows-latest
            rust: beta
          - os: macos-latest
            rust: beta

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-

    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-index-

    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-build-target-

    - name: Install Python and pip (for yt-dlp)
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install yt-dlp
      run: |
        python -m pip install --upgrade pip
        pip install yt-dlp

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Run tests
      run: cargo test --verbose

    - name: Run tests with all features
      run: cargo test --all-features --verbose

  build:
    name: Build Release
    runs-on: ${{ matrix.os }}
    needs: test
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: youtube_video_downloader
            asset_name: youtube_video_downloader-linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: youtube_video_downloader.exe
            asset_name: youtube_video_downloader-windows-x86_64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: youtube_video_downloader
            asset_name: youtube_video_downloader-macos-x86_64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache cargo
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Build release
      run: cargo build --release --target ${{ matrix.target }}

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview

    - name: Install cargo-llvm-cov
      run: cargo install cargo-llvm-cov

    - name: Install Python and yt-dlp
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    
    - name: Install yt-dlp
      run: pip install yt-dlp

    - name: Generate coverage report
      run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: lcov.info
        fail_ci_if_error: true

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          youtube_video_downloader-linux-x86_64/*
          youtube_video_downloader-windows-x86_64.exe/*
          youtube_video_downloader-macos-x86_64/*
        generate_release_notes: true
        draft: false
        prerelease: false
        body: |
          ## üé¨ YouTube Video Downloader Release
          
          ### ‚ú® Novidades desta vers√£o:
          - Interface interativa com anima√ß√µes
          - Download de v√≠deo e √°udio via yt-dlp
          - Suporte multiplataforma (Linux, Windows, macOS)
          - Valida√ß√£o robusta de URLs do YouTube
          
          ### üì¶ Como instalar:
          1. Baixe o execut√°vel para seu sistema operacional
          2. Torne-o execut√°vel: `chmod +x youtube_video_downloader` (Linux/macOS)
          3. Execute: `./youtube_video_downloader --help`
          
          ### üîß Pr√©-requisitos:
          - Python 3.x
          - yt-dlp (instalado automaticamente se necess√°rio)
          
          ### üìã Uso:
          ```bash
          # Modo interativo
          ./youtube_video_downloader --interactive
          
          # Download direto
          ./youtube_video_downloader "https://youtube.com/watch?v=VIDEO_ID"
          
          # Apenas √°udio
          ./youtube_video_downloader "https://youtube.com/watch?v=VIDEO_ID" --audio
          ```
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  auto-release:
    name: Auto Release on Main
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get version from Cargo.toml
      id: get_version
      run: |
        VERSION=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
        echo "version=v$VERSION" >> $GITHUB_OUTPUT
        echo "Version: v$VERSION"

    - name: Check if tag exists
      id: check_tag
      run: |
        if git rev-parse "${{ steps.get_version.outputs.version }}" >/dev/null 2>&1; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Download all artifacts
      if: steps.check_tag.outputs.exists == 'false'
      uses: actions/download-artifact@v4

    - name: Create Git Tag
      if: steps.check_tag.outputs.exists == 'false'
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag -a "${{ steps.get_version.outputs.version }}" -m "Release ${{ steps.get_version.outputs.version }}"
        git push origin "${{ steps.get_version.outputs.version }}"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create Auto Release
      if: steps.check_tag.outputs.exists == 'false'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.get_version.outputs.version }}
        name: "Release ${{ steps.get_version.outputs.version }}"
        files: |
          youtube_video_downloader-linux-x86_64/*
          youtube_video_downloader-windows-x86_64.exe/*
          youtube_video_downloader-macos-x86_64/*
        generate_release_notes: true
        draft: false
        prerelease: false
        body: |
          ## üé¨ YouTube Video Downloader - Release Autom√°tico
          
          Esta √© uma release autom√°tica baseada na vers√£o do Cargo.toml.
          
          ### ‚ú® Funcionalidades:
          - Interface interativa com anima√ß√µes din√¢micas
          - Download de v√≠deo (720p) e √°udio (MP3 192K)
          - Instala√ß√£o autom√°tica do yt-dlp
          - Suporte para URLs do YouTube e YouTube Shorts
          - Valida√ß√£o robusta de entrada
          - Estat√≠sticas de sess√£o
          
          ### üöÄ Uso R√°pido:
          ```bash
          # Modo interativo (recomendado)
          ./youtube_video_downloader -i
          
          # Download direto de v√≠deo
          ./youtube_video_downloader "https://youtu.be/VIDEO_ID"
          
          # Download apenas de √°udio
          ./youtube_video_downloader "https://youtu.be/VIDEO_ID" -a
          ```
          
          ### üìã Comandos Interativos:
          - `help` - Mostra ajuda
          - `demo` - Demonstra√ß√£o de anima√ß√µes
          - `stats` - Estat√≠sticas da sess√£o
          - `clear` - Limpa a tela
          - `exit` - Sair do programa
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}