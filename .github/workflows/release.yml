name: Release Management

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Tipo de versão (patch, minor, major)'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
      custom_version:
        description: 'Versão customizada (opcional, ex: 1.2.3)'
        required: false
        type: string
      prerelease:
        description: 'É uma pré-release?'
        required: false
        default: false
        type: boolean

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create New Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-edit
      run: cargo install cargo-edit

    - name: Get current version
      id: current_version
      run: |
        CURRENT=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
        echo "current=$CURRENT" >> $GITHUB_OUTPUT
        echo "Current version: $CURRENT"

    - name: Calculate new version
      id: new_version
      run: |
        if [ -n "${{ github.event.inputs.custom_version }}" ]; then
          NEW_VERSION="${{ github.event.inputs.custom_version }}"
        else
          CURRENT="${{ steps.current_version.outputs.current }}"
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          case "${{ github.event.inputs.version_type }}" in
            "major")
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            "minor")
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            "patch")
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
        fi
        
        if [ "${{ github.event.inputs.prerelease }}" = "true" ]; then
          NEW_VERSION="$NEW_VERSION-rc.$(date +%Y%m%d%H%M%S)"
        fi
        
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "tag=v$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "New version: $NEW_VERSION"

    - name: Update Cargo.toml version
      run: |
        cargo set-version ${{ steps.new_version.outputs.version }}
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git add Cargo.toml Cargo.lock
        git commit -m "chore: bump version to ${{ steps.new_version.outputs.version }}"
        git push origin main

    - name: Create and push tag
      run: |
        git tag -a "${{ steps.new_version.outputs.tag }}" -m "Release ${{ steps.new_version.outputs.tag }}"
        git push origin "${{ steps.new_version.outputs.tag }}"

    - name: Trigger CI/CD pipeline
      run: |
        echo "Tag ${{ steps.new_version.outputs.tag }} created successfully!"
        echo "CI/CD pipeline will be triggered automatically."

  hotfix-release:
    name: Hotfix Release
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && contains(github.event.inputs.version_type, 'hotfix')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Create hotfix branch
      run: |
        CURRENT_VERSION=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
        HOTFIX_BRANCH="hotfix/v$CURRENT_VERSION"
        
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git checkout -b "$HOTFIX_BRANCH"
        git push origin "$HOTFIX_BRANCH"
        
        echo "Hotfix branch $HOTFIX_BRANCH created successfully!"
        echo "Apply your fixes to this branch and create a PR to main."

  changelog:
    name: Update Changelog
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Generate changelog
      run: |
        TAG_NAME=${GITHUB_REF#refs/tags/}
        PREV_TAG=$(git describe --tags --abbrev=0 $TAG_NAME^ 2>/dev/null || echo "")
        
        echo "# Changelog" > CHANGELOG_NEW.md
        echo "" >> CHANGELOG_NEW.md
        echo "## [$TAG_NAME] - $(date +%Y-%m-%d)" >> CHANGELOG_NEW.md
        echo "" >> CHANGELOG_NEW.md
        
        if [ -n "$PREV_TAG" ]; then
          echo "### Changes since $PREV_TAG:" >> CHANGELOG_NEW.md
          git log --pretty=format:"- %s" $PREV_TAG..$TAG_NAME >> CHANGELOG_NEW.md
        else
          echo "### Initial release:" >> CHANGELOG_NEW.md
          git log --pretty=format:"- %s" >> CHANGELOG_NEW.md
        fi
        
        echo "" >> CHANGELOG_NEW.md
        
        if [ -f CHANGELOG.md ]; then
          tail -n +2 CHANGELOG.md >> CHANGELOG_NEW.md
        fi
        
        mv CHANGELOG_NEW.md CHANGELOG.md
        
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git add CHANGELOG.md
        git commit -m "docs: update changelog for $TAG_NAME" || echo "No changes to commit"
        git push origin main || echo "No changes to push"